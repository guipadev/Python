"""
U2 - 6 | Tarea 2 - Adivina el n√∫mero (II)

En esta actividad se retomar√° problema descrito en el ejemplo anterior y se ampl√≠an los requisitos 
de la soluci√≥n con el objetivo de evaluar la apropiaci√≥n de los conceptos discutidos en la unidad.

Para efectos pr√°cticos de la calificaci√≥n el n√∫mero que el usuario debe adivinar es dado al inicio 
de la ejecuci√≥n, ya que es necesario que el juez pueda saber de antemano los resultados que se van
a obtener; pero con unas cuantas modificaciones se pude obtener un n√∫mero aleatorio de forma que 
termina siendo completamente oculto para el usuario. Esto se logra mediante el uso de una librer√≠a 
de Python (este tema ser√° tratado en unidades posteriores del curso) la cual permite obtener 
n√∫meros aleatorios de diferentes formas; entre ellas est√° la posibilidad de definir el intervalo 
en el que se quiere que se encuentre el n√∫mero.

üí° Problema: Adivina el n√∫mero (II)
El juego creado en el √∫ltimo evento fue un √©xito total, por lo que se desea hacer el mismo juego para
la pr√≥xima reuni√≥n del equipo del trabajo. El juego trataba de que los participantes deber√°n intentar
adivinar un n√∫mero secreto en un n√∫mero determinado de intentos. 
Ahora, con un poco m√°s de tiempo se decide implementar ciertas mejoras para hacer m√°s interesante 
el juego.

El juego debe cumplir las siguientes reglas

1. El organizador es quien debe ingresar el n√∫mero secreto, un n√∫mero m√°ximo de intentos 
y el valor m√≠nimo y m√°ximo donde se puede encontrar el n√∫mero secreto

2. El juego debe darle la bienvenida al jugador con el siguiente texto

- ¬°Bienvenido! Por favor ingrese n√∫meros entre <m√≠nimo> y <m√°ximo> para ganar.

3. En cada ronda se debe indicar al jugador el n√∫mero de intentos restantes con el que cuenta de la 
siguiente forma:

- Intentos restantes: <intentos>.

4. El juego solo deber√° permitir el ingreso de n√∫meros entre el m√≠nimo y m√°ximo definidos como 
par√°metros iniciales (ambos valores est√°n incluidos). 
Si el n√∫mero ingresado no est√° dentro del intervalo, se debe imprimir el siguiente mensaje.
No se resta ning√∫n intento y se avanza al siguiente turno.

- El n√∫mero que ingres√≥ no se encuentra en el rango de valores indicado. Intente nuevamente

5. Si el valor ingresado por el jugador es correcto se debe imprimir el siguiente mensaje

- ¬°Felicidades! El n√∫mero ingresado es correcto.

6. En caso de que el valor ingresado sea incorrecto, pero el jugador a√∫n tenga intentos, 
se debe indicar al jugador si el n√∫mero ingresado es mayor o menor al n√∫mero secreto con uno 
de los siguientes dos mensajes, seg√∫n corresponda

- Respuesta incorrecta. El n√∫mero que ingres√≥ es mayor que el n√∫mero secreto.

- Respuesta incorrecta. El n√∫mero que ingres√≥ es menor que el n√∫mero secreto.

7. Si el jugador se queda sin intentos se debe imprimir el siguiente mensaje. 
No se indica si el n√∫mero es mayor o menor que el n√∫mero secreto

- Se acabaron los intentos. El n√∫mero correcto era <valor>.

8. Al finalizar el juego, sin importar el resultado, se debe imprimir el siguiente mensaje

- Fin del juego. ¬°Gracias por participar!

‚å®Ô∏è Entrada
¬øC√≥mo funciona la entrada en UNCode?
La entrada ser√° provista por UNCode en la forma de casos de prueba de texto. 
Esta entrada deber√° ser recibida en su programa con instrucciones que incluyan la funci√≥n input.

El programa recibir√° inicialmente dos l√≠neas con los dos par√°metros iniciales.

- num: n√∫mero entero con el valor secreto que deber√° intentar adivinar el jugador.
- intentos: n√∫mero entero con el n√∫mero m√°ximo de intentos que puede realizar el jugador.
- min: valor m√≠nimo del intervalo donde se puede encontrar el n√∫mero secreto.
- max: valor m√°ximo del intervalo donde se puede encontrar el n√∫mero secreto.

Una vez definidos estos par√°metros iniciales, se recibir√°n los intentos del jugador las veces que 
sean necesarias con un m√°ximo de entradas igual al n√∫mero de intentos definidos inicialmente.

üñ•Ô∏è Salida
¬øC√≥mo funciona la salida en UNCode?
La salida ser√° capturada por UNCode y comparada con la salida esperada de cada caso de prueba. 
Esta salida deber√° ser generada por su programa con instrucciones que incluyan la funci√≥n print.

El programa debe imprimir en la salida las l√≠neas que sean necesarias seg√∫n el escenario 
correspondiente. Un ejemplo de ejecuci√≥n es el descrito en la siguiente secci√≥n.

üß© Ejemplos
¬øC√≥mo debe funcionar mi programa?
A continuaci√≥n, podr√° ver y comparar sus resultados con algunos casos de prueba de ejemplo. 
Utilice las entradas provistas y compare el resultado con las salidas correspondientes.

Entrada Ejemplo 1
7
3
1

10
22
6
8
7
Salida Ejemplo 1
¬°Bienvenido! Por favor ingrese n√∫meros entre 1 y 10 para ganar.
Intentos restantes: 3.
El n√∫mero que ingres√≥ no se encuentra en el rango de valores indicado. Intente nuevamente
Intentos restantes: 3.
Respuesta incorrecta. El n√∫mero que ingres√≥ es menor que el n√∫mero secreto.
Intentos restantes: 2.
Respuesta incorrecta. El n√∫mero que ingres√≥ es mayor que el n√∫mero secreto.
Intentos restantes: 1.
¬°Felicidades! El n√∫mero ingresado es correcto.
Fin del juego. ¬°Gracias por participar!

Entrada Ejemplo 2
9
3
1
10
3
4
50
5
Salida Ejemplo 2
¬°Bienvenido! Por favor ingrese n√∫meros entre 1 y 10 para ganar.
Intentos restantes: 3.
Respuesta incorrecta. El n√∫mero que ingres√≥ es menor que el n√∫mero secreto.
Intentos restantes: 2.
Respuesta incorrecta. El n√∫mero que ingres√≥ es menor que el n√∫mero secreto.
Intentos restantes: 1.
El n√∫mero que ingres√≥ no se encuentra en el rango de valores indicado. Intente nuevamente
Intentos restantes: 1.
Se acabaron los intentos. El n√∫mero correcto era 9.
Fin del juego. ¬°Gracias por participar!
"""

### ESCRIBA SU C√ìDIGO A PARTIR DE AQU√ç ### (~ 24 - 27 l√≠neas de c√≥digo)

# Entrada del programa (~ 4 l√≠neas).
numero_secreto = int(input())  # n√∫mero secreto
intentos = int(input()) # n√∫mero max de intentos
min = int(input())  # vr min intervalo num secreto
max = int(input())  # vr max intervalo num secreto

# Ciclo | variables | texto inicial (~ 19 - 21 l√≠neas).
print(f'¬°Bienvenido! Por favor ingrese n√∫meros entre {min} y {max} para ganar.')

while intentos > 0:
    print(f'Intentos restantes: {intentos}.')
    numero_ingresado = int(input())

    if numero_ingresado == numero_secreto:
        print('¬°Felicidades! El n√∫mero ingresado es correcto.')
        break
    
    if(numero_ingresado < min or numero_ingresado > max):
        print(f'El n√∫mero que ingres√≥ no se encuentra en el rango de valores indicado. Intente nuevamente')
        intentos

    else:
        intentos -= 1

        if intentos == 0:
            print(f'Se acabaron los intentos. El n√∫mero correcto era {numero_secreto}.')

        elif(numero_ingresado < numero_secreto and numero_ingresado >= min):
            print(f'Respuesta incorrecta. El n√∫mero que ingres√≥ es menor que el n√∫mero secreto.')

        elif(numero_ingresado > numero_secreto and numero_ingresado <= max):
            print(f'Respuesta incorrecta. El n√∫mero que ingres√≥ es mayor que el n√∫mero secreto.')

        
         
# Mensaje final (~ 1 l√≠nea).
print('Fin del juego. ¬°Gracias por participar!')