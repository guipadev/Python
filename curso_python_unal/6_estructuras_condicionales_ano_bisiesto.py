"""
U2 - 2 | Estructuras condicionales
En esta pr√°ctica trabajaremos en el uso de la estructura de control de flujo condicional,
usando expresiones booleanas junto las sentencias if, else y elif para poder expresar 
los casos de nuestro inter√©s e indicar el conjunto de acciones que se deben ejecutar.

Aunque la estructura formada con esas sentencias es sencilla de manejar, se debe tener 
especial cuidado de que las expresiones booleanas est√©n bien formadas y describan 
correctamente el caso o escenario que se quiere representar, es decir, que el c√≥digo 
deseado se ejecute √∫nicamente en las condiciones deseadas.

Por ejemplo, si una aplicaci√≥n solo muestra contenido a personas mayores de edad, 
el siguiente c√≥digo representa un error para lograr este objetivo, dado que estar√≠a 
excluyendo a las personas con una edad de exactamente 18 a√±os.

if edad > 18:
    mostrar_contenido()
else:
    informar_bloqueo()

üí° Problema: A√±os bisiestos
Los a√±os bisiestos son aquellos a√±os en donde se agrega un d√≠a m√°s al a√±o en el mes de 
febrero con el prop√≥sito de realizar un ajuste razonable con respecto al a√±o solar. 
Esto se debe a que un a√±o solar no equivale a exactamente 365 d√≠as, sino a 365.2425 d√≠as 
aproximadamente. Para definir si un a√±o bisiesto se aplica una serie de reglas.

- Los a√±os divisibles entre 4 son bisiestos.
- Los a√±os que son divisibles entre 4, pero no entre 100, son bisiestos.
- Los a√±os divisibles entre 100, pero que no son divisibles entre 400 no son bisiestos.
- Los a√±os divisibles entre 100 y entre 400 son bisiestos

En este ejercicio deber√° realizar un programa que reciba un a√±o y determine si es un a√±o 
bisiesto o no.

‚å®Ô∏è Entrada
¬øC√≥mo funciona la entrada en UNCode?
La entrada ser√° provista por UNCode en la forma de casos de prueba de texto. 
Esta entrada deber√° ser recibida en su programa con instrucciones que incluyan la funci√≥n 
input.

El programa recibir√° un √∫nico valor de entrada.
- a√±o: n√∫mero entero positivo (tipo int) que representa el a√±o ingresado.

üñ•Ô∏è Salida
¬øC√≥mo funciona la salida en UNCode?
La salida ser√° capturada por UNCode y comparada con la salida esperada de cada caso de
prueba. Esta salida deber√° ser generada por su programa con instrucciones que incluyan 
la funci√≥n print.

El programa debe imprimir en la salida una √∫nica l√≠nea.

- es_bisiesto: cadena de texto con valor "Es un a√±o bisiesto" o "No es un a√±o bisiesto" 
seg√∫n corresponda el caso.

üß© Ejemplos
¬øC√≥mo debe funcionar mi programa?
A continuaci√≥n, podr√° ver y comparar sus resultados con algunos casos de prueba de ejemplo. 
Utilice las entradas provistas y compare el resultado con las salidas correspondientes.

Entrada Ejemplo 1
1537
Salida Ejemplo 1
No es un a√±o bisiesto

Entrada Ejemplo 2
1900
Salida Ejemplo 2
No es un a√±o bisiesto

Entrada Ejemplo 3
2000
Salida Ejemplo 3
Es un a√±o bisiesto
"""

### ESCRIBA SU C√ìDIGO A PARTIR DE AQU√ç ### (~ 8-12 l√≠neas de c√≥digo)
# Entrada del programa (~ 1 l√≠nea).
a√±o = int(input())

# Evaluaci√≥n de condiciones y salida del programa por escenario (~ 7-11 l√≠neas).
if a√±o % 4 != 0: 
	print("No es un a√±o bisiesto")
elif a√±o % 4 == 0 and a√±o % 100 != 0:
	print("Es un a√±o bisiesto")
elif a√±o % 4 == 0 and a√±o % 100 == 0 and a√±o % 400 != 0:
	print("No es un a√±o bisiesto")
elif a√±o % 4 == 0 and a√±o % 100 == 0 and a√±o % 400 == 0: 
	print("Es un a√±o bisiesto")
