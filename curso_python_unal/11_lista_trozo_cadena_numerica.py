"""
U3 - 1 | Trozos en cadenas

En esta pr√°ctica aplicaremos los conceptos de √≠ndices y trozos para el acceso al contenido de 
colecciones ordenadas y secuenciales como las cadenas de texto y las listas.

üí° Problema: Representaci√≥n num√©rica del color
Los colores que vemos en la pantalla de nuestros dispositivos electr√≥nicos como el computador o los 
tel√©fonos inteligentes son codificados en forma de n√∫meros.

Para lograr esto, se utiliza una de las propiedades de la luz visible, que nos permite considerar 
cada color como la intensidad de tres colores principales: rojo (red en ingl√©s), verde (green en ingl√©s) 
y azul (blue en ingl√©s). Este tipo de codificaci√≥n recibe el nombre de rgb, y es usada en los p√≠xeles de las pantallas que usamos cada d√≠a.

Para un programador o un artista digital, un color en rgb no es m√°s que tres valores enteros que van
desde 0 hasta 255, con los cuales se representa la intensidad de los colores rojo, verde y azul. 
En esta codificaci√≥n, 0 significa la ausencia de dicho color, y 255 significa su presencia con una 
intensidad m√°xima.

Por ejemplo, un color con componentes rgb (255, 0, 0) nos producir√° el color rojo m√°s puro, con su 
m√°ximo de intensidad y ausencia total de colores verde y azul. Esto tambi√©n aplica para el caso del
color verde (0,255,0) y azul (0, 0, 255).

Le invitamos a escribir en Google "rgb 255 0 0" y ver la herramienta ofrecida como resultado, la 
cual permite variar los n√∫meros y ver los tipos de colores que se van formando.

Para facilitar el trabajo y la selecci√≥n de colores, es com√∫n utilizar otro tipo de representaciones
para estos n√∫meros. Una de esas formas es la notaci√≥n hexadecimal, que normalmente se representa con
una cadena de texto como #ff33a2, iniciando con el s√≠mbolo "#", seguido de seis d√≠gitos hexadecimales.
Cada dos d√≠gitos representan un color rgb.

#FF33A2

Base hexadecimal        Base decimal
FF                      255
33                      51
A2                      162

En esta actividad deber√° desarrollar un programa en Python que transforme un color en hexadecimal
a sus valores rgb en base decimal.

‚å®Ô∏è Entrada
¬øC√≥mo funciona la entrada en UNCode?
La entrada ser√° provista por UNCode en la forma de casos de prueba de texto. Esta entrada deber√° 
ser recibida en su programa con instrucciones que incluyan la funci√≥n input.

El programa recibir√° un √∫nico valor de entrada:

- color: cadena de texto que representa un color en formato hexadecimal. 
La cadena contiene un valor hexadecimal que se encuentran entre #000000 hasta #ffffff.

üñ•Ô∏è Salida
¬øC√≥mo funciona la salida en UNCode?
La salida ser√° capturada por UNCode y comparada con la salida esperada de cada caso de prueba. 
Esta salida deber√° ser generada por su programa con instrucciones que incluyan la funci√≥n print.

El programa debe imprimir en la salida una √∫nica l√≠nea:

- color_rgb: el programa debe imprimir una cadena de texto de la forma R: 
<valor_r> G: <valor_g> B: <valor_b>, en donde cada valor corresponde a cada componente
de color en formato decimal.

üß© Ejemplos
¬øC√≥mo debe funcionar mi programa?
A continuaci√≥n, podr√° ver y comparar sus resultados con algunos casos de prueba de ejemplo. 
Utilice las entradas provistas y compare el resultado con las salidas correspondientes.

Entrada Ejemplo 1       Salida Ejemplo 1
#6e00ff                 R: 110 G: 0 B: 255

Entrada Ejemplo 2       Salida Ejemplo 2
#28ad2f                 R: 40 G: 173 B: 47

Entrada Ejemplo 3       Salida Ejemplo 3
#fadc82                 R: 250 G: 220 B: 130

‚ö†Ô∏è Notas
La conversi√≥n de n√∫meros entre las bases decimal y hexadecimal se discuti√≥ en la primera unidad del
curso. Para realizar la conversi√≥n de una cadena con un valor entero en base hexadecimal a un valor
num√©rico en base decimal puede hacer lo siguiente:

color_int = int("ff", 16)
"""

### ESCRIBA SU C√ìDIGO A PARTIR DE AQU√ç ### (~ 5-8 l√≠neas de c√≥digo)
# Entrada del programa (~ 1 l√≠nea).
color = input()

# Obtenci√≥n de valores hexadecimales y transformaci√≥n (~ 3-6 l√≠neas)
valor_r = int(color[1:3],16)

valor_g = int(color[3:5],16)

valor_b = int(color[5:7],16)

# Salida del programa (~ 1 l√≠nea).
print(f"R: {valor_r} G: {valor_g} B: {valor_b}")