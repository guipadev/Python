"""
U2 - 3 | Estructuras iterativas (while)
En esta pr√°ctica trabajaremos en el uso de las estructuras iterativas indefinidas 
y en particular, en la aplicaci√≥n de las sentencias while, break y continue.

Una de las mayores dificultades que se puede tener con las estructuras iterativas es que 
se puede perder la noci√≥n del c√≥digo que se ejecuta en nuestro programa. 
Cuando una estructura iterativa se ejecuta, es posible que no se haya considerado un caso, 
que el valor de una variable no se actualice o que se manejen rangos de valores inesperados. 
El resultado de esos errores es obtener resultados fuera de lo deseado o esperado.

üí° Problema: Disco duro
Se ha decidido realizar una copia de seguridad de todos los archivos de una empresa 
peque√±a. Para esto, se necesita adquirir un nuevo disco duro que pueda almacenar toda 
esa informaci√≥n. Se quiere gastar lo m√≠nimo posible, por lo que se plantea comprar el 
dispositivo que tenga la capacidad m√≠nima necesaria para realizar el respaldo.

Inicialmente, identifica que toda la informaci√≥n que se desea almacenar tiene un tama√±o 
total w (en Giga Bytes o GB), y que en el proveedor de tecnolog√≠a con el que se va a 
adquirir el disco duro solo vende unidades con capacidades determinadas en potencias de 
2, disponibles desde 1 GB.

En este ejercicio deber√° realizar un programa que reciba el tama√±o en GB de los archivos 
que se desean almacenar e imprima en pantalla la capacidad necesaria en GB del dispositivo
de almacenamiento.

‚å®Ô∏è Entrada
¬øC√≥mo funciona la entrada en UNCode?
La entrada ser√° provista por UNCode en la forma de casos de prueba de texto. 
Esta entrada deber√° ser recibida en su programa con instrucciones que incluyan 
la funci√≥n input.

El programa recibir√° un √∫nico valor de entrada:
- tama√±o: n√∫mero decimal (tipo float) entre 0 y 10000, que representa el tama√±o total 
en GB de los archivos que se desea almacenar.

üñ•Ô∏è Salida
¬øC√≥mo funciona la salida en UNCode?
La salida ser√° capturada por UNCode y comparada con la salida esperada de cada caso de 
prueba. Esta salida deber√° ser generada por su programa con instrucciones que incluyan 
la funci√≥n print.

El programa debe imprimir en la salida una √∫nica l√≠nea.

- capacidad: el programa debe imprimir una cadena de texto con el n√∫mero entero positivo 
que representa la capacidad del disco duro necesario para almacenar los archivos. 
Este n√∫mero debe ser la potencia de 2 m√°s cercana mayor o igual que el tama√±o de los 
archivos y se deber√° escribir con el siguiente formato:

La capacidad requerida es de <valor> GB.

üß© Ejemplos
¬øC√≥mo debe funcionar mi programa?
A continuaci√≥n, podr√° ver y comparar sus resultados con algunos casos de prueba de ejemplo. 
Utilice las entradas provistas y compare el resultado con las salidas correspondientes.

Entrada Ejemplo 1
0.98
Salida Ejemplo 1
La capacidad requerida es de 1 GB.

Entrada Ejemplo 2
23.50
Salida Ejemplo 2
La capacidad requerida es de 32 GB.

Entrada Ejemplo 3
256.15
Salida Ejemplo 3
La capacidad requerida es de 512 GB.
"""

### ESCRIBA SU C√ìDIGO A PARTIR DE AQU√ç ### (~ 5 l√≠neas de c√≥digo)
w = 0 
capacidad = 2 ** w

# Entrada del programa (~ 1 l√≠nea).
tama√±o = float(input())                       # Reemplace 'None' por el c√≥digo necesario. 

# C√°lculo de la capacidad (~ 3 l√≠neas).
while capacidad < tama√±o: 
    capacidad = 2 ** w 
    w = w + 1 
    
    if capacidad > tama√±o: 
        continue

# Salida del programa (~ 1 l√≠nea).
print(f'La capacidad requerida es de {capacidad} GB.')