"""
U3 - 2 | Listas (acceso e iteraci√≥n)

En esta pr√°ctica trabajaremos con el tipo de dato lista, su declaraci√≥n, la operaci√≥n de acceso 
a los elementos que contiene y su uso en forma de iterable con estructuras de control iterativas.

üí° Problema: Producto Punto
El producto punto o producto escalar es una de las operaciones b√°sicas de √°lgebra lineal, una rama
de las matem√°ticas que tiene en su centro el concepto de vector. En pocas palabras, y sin entrar 
en detalles te√≥ricos, un vector es un objeto matem√°tico con una secuencia de n√∫meros reales, 
conocidos como componentes del vector. Esta secuencia tiene un tama√±o, que es conocido como la 
dimensi√≥n del vector.

Por ejemplo, un vector a de dimensi√≥n 2, cuyos componentes son los n√∫meros 0 y 1, se escribir√≠a 
de la forma v=(10,2).

La operaci√≥n de producto punto entre dos vectores u y v con la misma dimensi√≥n (que tienen la misma 
cantidad de elementos) consiste en realizar las siguientes operaciones:

- Multiplicar los componentes de cada vector que est√°n ubicados en la misma posici√≥n. 
La operaci√≥n no es v√°lida para vectores con dimensi√≥n distinta.
- Sumar el resultado de los productos realizados en el paso anterior. 
De esta forma, el resultado es siempre un n√∫mero, independientemente de la dimensi√≥n de los vectores.

Como se puede ver a continuaci√≥n, el producto punto para los vectores u=(1,3,5) y v=(4,2,0) tendr√≠a 
la multiplicaci√≥n de los componentes de cada vector en orden, de izquierda a derecha, y finalmente 
la suma de cada producto obtenido.

a = (1, 3,5)
b = (4, 2, 0)
a.b = 1x4 + 3x2 + 5x0

Para este ejemplo, el resultado se obtendr√≠a con la siguiente secuencia de operaciones:

u‚ãÖv=(1√ó4)+(3√ó2)+(5√ó0)
u‚ãÖv=4+6+0
u‚ãÖv=10

Para esta actividad deber√° escribir un programa de Python que tome como entrada dos secuencias 
de n√∫meros y calcule el producto punto de los vectores correspondientes.

‚å®Ô∏è Entrada

¬øC√≥mo funciona la entrada en UNCode?
La entrada ser√° provista por UNCode en la forma de casos de prueba de texto. 
Esta entrada deber√° ser recibida en su programa con instrucciones que incluyan la funci√≥n input.

El programa debe recibir dos entradas, cada una en una l√≠nea:

- vector_u: primera cadena de texto formada por n n√∫meros enteros separados por espacios.
- vector_v: segunda cadena de texto formada por n n√∫meros enteros separados por espacios.

Ambas cadenas de texto contienen la misma cantidad de n√∫meros n. 
los valores internos son n√∫meros enteros.

üñ•Ô∏è Salida
¬øC√≥mo funciona la salida en UNCode?
La salida ser√° capturada por UNCode y comparada con la salida esperada de cada caso de prueba. 
Esta salida deber√° ser generada por su programa con instrucciones que incluyan la funci√≥n print.

El programa debe imprimir en la salida una √∫nica l√≠nea:

producto_punto: valor num√©rico que representa el resultado de realizar la operaci√≥n con los dos 
vectores.

üß© Ejemplos
¬øC√≥mo debe funcionar mi programa?
A continuaci√≥n, podr√° ver y comparar sus resultados con algunos casos de prueba de ejemplo. 
Utilice las entradas provistas y compare el resultado con las salidas correspondientes.

Entrada Ejemplo 1           Salida Ejemplo 1
-32 -4 -13 -36 -7           13
-22 20 37 11 -38

‚ö†Ô∏è Notas
La entrada del programa es entregada en forma de cadena de texto. 
Para separar los elementos separados por espacio y convertirlos en enteros puede utilizar 
el siguiente c√≥digo:

# Obtener una lista de n√∫meros enteros
lista = [int(elemento) for elemento in input().split()]

Si lo desea, si√©ntase libre de crear su propia implementaci√≥n.
"""

### ESCRIBA SU C√ìDIGO A PARTIR DE AQU√ç ### (~ 6-11 l√≠neas de c√≥digo)
# Entrada del programa (~ 2-4 l√≠neas).
vector_u = input()
vector_v = input() 

# vectores a operar
Lista1 = [int(i) for i in vector_u.split(" ")] 
Lista2 = [int(j) for j in vector_v.split(" ")]

# C√°lculo del producto punto (~ 3-6 l√≠neas).
producto_punto = 0 

for k in range(len(Lista1)): producto_punto += Lista1 [k] * Lista2 [k]

# Salida del programa (~ 1 l√≠nea).
print(producto_punto)