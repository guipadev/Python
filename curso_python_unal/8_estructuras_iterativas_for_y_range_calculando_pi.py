"""
U2 - 4 | Estructuras iterativas (for y range)
En esta pr√°ctica trabajaremos con las estructuras de control iterativas basadas en 
iterables, y en particular del uso de la sentencia for en rangos num√©ricos.

Aunque la sentencia while y la sentencia for tienen grandes similitudes, cada uno tiene 
una funci√≥n clara. En el caso de while se suele utilizar en las ocasiones donde no se 
tiene certeza de cuantas iteraciones se debe realizar. 
Mientras que la sentencia for se aplica cuando se puede saber cu√°ntos ciclos se deben 
ejecutar; esto se cumple en la mayor√≠a de los casos al tatar con objetos iterables, 
ya que siempre se puede saber su tama√±o. 
El uso de una sentencia o de la otra en cada caso est√° relacionado con la aplicaci√≥n 
buenas pr√°cticas y la legibilidad de un c√≥digo.

üí° Problema: Calculando Pi
Uno de los m√©todos m√°s famosos para calcular el n√∫mero pi (œÄ), por su facilidad de 
implementaci√≥n, es la igualdad matem√°tica conocida como Serie de Leibniz. 
Esta se apoya en varias propiedades matem√°ticas para determinar el valor de œÄ al realizar 
una sumatoria infinita de n√∫meros definidos en un patr√≥n sencillo. 
Aunque en la pr√°ctica no es posible considerar realizar infinitas operaciones, 
a√∫n se puede lograr cierta aproximaci√≥n, ya que conforme mayor sea el n√∫mero de valores 
empleados en la sumatoria, m√°s cerca estar√° el resultado obtenido del valor de pi (œÄ).

La igualdad de la Serie de Leibniz es la siguiente:
1/1‚àí1/3+1/5‚àí1/7+1/9‚àí...=œÄ/4

Como puede notar, la serie est√° compuesta por las fracciones con numerador 1 y denominador
impar en orden, intercalando entre valores positivos y negativos. 
El resultado es el valor œÄ4, que se puede multiplicar por 4 al final para obtener el valor 
aproximado de œÄ.

En este ejercicio deber√° realizar un programa que retorne el valor aproximado de œÄ, 
obtenido de realizar la serie de Leibniz de manera que los denominadores de las fracciones
sean menores a un n√∫mero entero n. 
En este sentido, el denominador del √∫ltimo elemento corresponde al valor n‚àí1, o a n‚àí2 
cuando n sea impar.

Por ejemplo, para un valor n de 10 o de 11 se realizar√≠a la misma sumatoria con un 
resultado con muy poca precisi√≥n del valor real:

œÄ‚âà4(1/1‚àí1/3+1/5‚àí1/7+1/9)=3.3396825397

Para este ejercicio, deber√° indicar el valor con 10 d√≠gitos decimales.

‚å®Ô∏è Entrada
¬øC√≥mo funciona la entrada en UNCode?
La entrada ser√° provista por UNCode en la forma de casos de prueba de texto. 
Esta entrada deber√° ser recibida en su programa con instrucciones que incluyan 
la funci√≥n input.

El programa recibir√° un √∫nico valor de entrada:
- n: n√∫mero entero (tipo int), que representa el l√≠mite excluido de los enteros 
usados como denominador en la sumatoria.

üñ•Ô∏è Salida

¬øC√≥mo funciona la salida en UNCode?
La salida ser√° capturada por UNCode y comparada con la salida esperada de cada caso de prueba. Esta salida deber√° ser generada por su programa con instrucciones que incluyan la funci√≥n print.

El programa debe imprimir en la salida una √∫nica l√≠nea.
- pi: n√∫mero decimal (tipo float) con el valor obtenido de la aproximaci√≥n del n√∫mero œÄ 
con la sumatoria de la serie de Leibniz.

üß© Ejemplos
¬øC√≥mo debe funcionar mi programa?
A continuaci√≥n, podr√° ver y comparar sus resultados con algunos casos de prueba de 
ejemplo. Utilice las entradas provistas y compare el resultado con las salidas 
correspondientes.

Entrada Ejemplo 1
11
Salida Ejemplo 1
3.3396825397

Entrada Ejemplo 2
100
Salida Ejemplo 2
3.1215946526

Entrada Ejemplo 3
25615
Salida Ejemplo 3
3.1416707359
"""

### ESCRIBA SU C√ìDIGO A PARTIR DE AQU√ç ### (~ 7-10 l√≠neas de c√≥digo)

# Entrada del programa (~ 1 l√≠nea).
n = int(input())
c = 0

# Serie de Leibniz (~ 5-8 l√≠neas). 
pi = 0
for x in range(1, n, 2):
    pi = pi+(((-1) ** c)*(1/x))
    c += 1
pi = pi * 4

# Salida del programa con 10 decimales (~ 1 l√≠nea).
print(f"{pi:.10f}")