"""
U3 - 4 | Conjuntos
En esta pr√°ctica trabajaremos en la creaci√≥n de conjuntos de Python, y en la aplicaci√≥n
pr√°ctica de sus operaciones b√°sicas.

üí° Problema: Semejanza de textos
¬øC√≥mo podemos conocer si dos textos son semejantes?

Una forma de medir la semejanza entre dos textos, se plantea medir esta semejanza con la cantidad 
de palabras y signos de puntuaci√≥n utilizados y compartidos por ambos textos.

En primer lugar, se podr√≠a conocer cuantas palabras distintas fueron usadas en total al escribir 
los dos textos, para tener una idea del tama√±o del vocabulario usado por sus escritores. 
Adem√°s, para determinar si podr√≠a tenerse una semejanza se podr√≠a ver los t√©rminos repetidos, 
calculando cuantas de estas palabras se encuentran tanto en el primer documento como en el segundo.

En esta actividad deber√° escribir un programa que reciba dos l√≠neas con cadenas de texto distintas, 
y que imprima como resultado el n√∫mero de palabras compartidas y el total de palabras √∫nicas 
encontradas en ambas cadenas.

Por ejemplo, si vemos las siguientes dos frases: "vaso medio lleno" y "vaso medio vac√≠o". 
Podemos notar que comparten "vaso" y "medio", por lo que nuestro valor para palabras compartidas 
es 2. Adem√°s, tenemos las palabras "vac√≠o" y "lleno", las cuales son √∫nicas, ya que pertenecen a 
la primera o a la segunda frase, pero no a ambas, por lo que tendr√≠amos un valor de 2 para palabras 
√∫nicas.

‚å®Ô∏è Entrada
¬øC√≥mo funciona la entrada en UNCode?
La entrada ser√° provista por UNCode en la forma de casos de prueba de texto. 
Esta entrada deber√° ser recibida en su programa con instrucciones que incluyan la funci√≥n input.

El programa deber√° recibir dos entradas, cada una en una l√≠nea:

- listado_a: cadena de texto que contiene palabras separadas por espacios en blanco, pertenecientes 
al conjunto a.
- listado_b: cadena de texto que contiene palabras separadas por espacios en blanco, pertenecientes
al conjunto b.

üñ•Ô∏è Salida
¬øC√≥mo funciona la salida en UNCode?
La salida ser√° capturada por UNCode y comparada con la salida esperada de cada caso de prueba. 
Esta salida deber√° ser generada por su programa con instrucciones que incluyan la funci√≥n print.

El programa debe imprimir dos l√≠neas de salida:

- palabras_compartidas: n√∫mero entero con la cantidad de palabras que tienen en com√∫n las dos 
cadenas.
- palabras_unicas n√∫mero entero con la cantidad de palabras √∫nicas encontradas en ambas cadenas.

üß© Ejemplos
¬øC√≥mo debe funcionar mi programa?
A continuaci√≥n, podr√° ver y comparar sus resultados con algunos casos de prueba de ejemplo. 
Utilice las entradas provistas y compare el resultado con las salidas correspondientes.

Entrada Ejemplo 1                               Salida Ejemplo 1
Bello es mejor que feo                          3
Expl√≠cito es mejor que impl√≠cito                4

Entrada Ejemplo 2                               Salida Ejemplo 2
Ahora es mejor que nunca                        4
Aunque nunca es a menudo mejor que ya mismo     6

‚ö†Ô∏è Notas
Puede obtener una lista con las palabras separadas por espacios de una cadena con el m√©todo .split(),
de la siguiente forma:

> "uno dos tres cuatro".split()
['uno', 'dos', 'tres', 'cuatro']
"""

### ESCRIBA SU C√ìDIGO A PARTIR DE AQU√ç ### (~ 4-10 l√≠neas de c√≥digo)
# Entrada del programa | transformaci√≥n a conjuntos (~ 2-6 l√≠neas).

listado_a = set(input().split())
listado_b = set(input().split())

diferenciaA = listado_a & listado_b
diferenciaB = listado_a ^ listado_b

print(len(diferenciaA))
print(len(diferenciaB))



# Procesar conjuntos | salida del programa (~ 2-4 l√≠neas)