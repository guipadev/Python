"""
U3 - 5 | Ejemplo 3 - Listas de reproducci√≥n (I)
En este ejemplo se muestra la aplicaci√≥n de los conceptos vistos en la tercera unidad del curso. 
Para esta ocasi√≥n desarrollaremos un programa que tenga el comportamiento b√°sico de una lista de 
reproducci√≥n de m√∫sica ordenada por artistas.

üí° Problema: Listas de reproducci√≥n (I)
Con el paso de los a√±os, usted y su grupo de amigos han adquirido la costumbre de reproducir m√∫sica
cada vez que se reunen. A pesar de que tienen gustos similares cuando se trata de sus artistas 
preferidos, es muy dif√≠cil estar de acuerdo al elegir cu√°l de las canciones de un artista les 
gustar√≠a escuchar a continuaci√≥n. Para esto, usted decide aplicar los conocimientos que ha adquirido
en su curso de programaci√≥n para crear un programa que tenga listas de reproducci√≥n por artista y 
que permita al grupo simplemente decidir cu√°l artista les gustar√≠a escuchar. Este programa generar√° 
comandos que usted puede luego ingresar en cualquiera de las plataformas de streaming que tengan a 
su alcance.

En una hoja de papel plantean los requisitos b√°sicos que el programa debe tener para permitir a√±adir
canciones y reportar la pr√≥xima canci√≥n que se debe escuchar. Finalmente, deciden que el programa 
funcionar√° por medio de comandos recibidos de la entrada en forma de texto, y que realizar√° una 
tarea espec√≠fica en cada caso. Inicialmente, el programa tendr√≠a los siguientes 3 comandos.

a√±adir: 
primero que nada, su programa deber√≠a permitir a√±adir canciones nuevas. 
Para esto, el usuario puede agregar el t√≠tulo de una canci√≥n de un artista determinado. 
Una vez recibe el comando a√±adir, el programa recibe, en las dos l√≠neas siguientes, 
el nombre de la canci√≥n y el nombre de artista y lo agrega a la lista de reproducci√≥n.

reproducir: 
una vez usted y sus amigos han a√±adido las canciones que m√°s les gusta, deber√≠an poder "reproducir" 
la siguiente canci√≥n. Despu√©s de ingresar el comando reproducir, en la siguiente l√≠nea se ingresa el
nombre de un artista, el programa deber√° escribir en pantalla la siguiente canci√≥n a reproducirse. 
Para simplificar las cosas, las canciones se reproducir√°n en el orden en el que fueron a√±adidas, 
reproduciendo primero las canciones m√°s antiguas y eliminando las canciones conforme se van 
reproduciendo. 

El texto que reporta este comando tiene 3 formas:
- Si el artista tiene canciones en cola, deber√° escribir el texto: 
Reproduciendo <canci√≥n> de <artista>., con el t√≠tulo de la canci√≥n y el nombre del artista 
correspondientes
- Si ya se reprodujeron todas las canciones de un artista, deber√° escribir el texto: 
No quedan canciones en cola.
- Si el artista ingresado nunca ha tenido canciones registradas, deber√° escribir el mensaje 
El artista no tiene canciones registradas.

detener: 
como el artista recibe un n√∫mero indeterminado de canciones, se tiene que definir una forma de 
terminar su ejecuci√≥n. 
Cuando el programa recibe el comando detener, el programa deber√° escribir el mensaje 
Terminando sesi√≥n. ¬°Hasta pronto! 
y terminar su ejecuci√≥n.

En caso de que el comando ingresado est√© mal escrito o sea desconocido por el programa, se deber√° informar al usuario con el mensaje Comando no reconocido. Intente de nuevo:

‚å®Ô∏è Entrada
¬øC√≥mo funciona la entrada en UNCode?
La entrada ser√° provista por UNCode en la forma de casos de prueba de texto. 
Esta entrada deber√° ser recibida en su programa con instrucciones que incluyan la funci√≥n input.

El programa recibir√° un n√∫mero indefinido de l√≠neas. Cada comando ir√° en una l√≠ne individual. 
De igual forma cada entrada adicional relacionada a un comando ir√° en una nueva l√≠nea.

- comando: Hay tres comandos posibles que el progama debe aceptar a√±adir, reproducir y detener. 
Cualquier otro texto de comando ser√° tomado como erroneo.

Dependiendo del comando ingresado, el programa recibir√° otras entradas:

- Para el caso del comando a√±adir, el programa recibir√° canci√≥n y artista en el mismo orden. 
Cada entrada en una l√≠nea individual.
- Para el caso del comando reproducir, el programa recibir√° una entrada extra artista en la 
siguiente l√≠nea.

üñ•Ô∏è Salida
¬øC√≥mo funciona la salida en UNCode?
La salida ser√° capturada por UNCode y comparada con la salida esperada de cada caso de prueba. 
Esta salida deber√° ser generada por su programa con instrucciones que incluyan la funci√≥n print.

El programa debe imprimir en la salida las l√≠neas que sean necesarias seg√∫n el escenario 
correspondiente. Un ejemplo de ejecuci√≥n es el descrito en la siguiente secci√≥n.

Entrada Ejemplo 1               Salida Ejemplo 1
a√±adir                          El artista no tiene canciones registradas.
Feel Good Inc.                  Reproduciendo Feel Good Inc. de Gorillaz.
Gorillaz                        No quedan canciones en cola.
reproducir                      Comando no reconocido. Intente de nuevo:
gorillaz                        Terminando la sesi√≥n. ¬°Hasta pronto!
reproducir
Gorillaz
reproducir
Gorillaz
ditinir
detener

Entrada Ejemplo 2               Salida Ejemplo 2
a√±adir                          Comando no reconocido. Intente de nuevo:
Yesterday                       Reproduciendo Yesterday de The Beatles.
The Beatles                     Reproduciendo Let it Be de The Beatles.
a√±adir                          Comando no reconocido. Intente de nuevo:        
El d√≠a de mi suerte             Reproduciendo El d√≠a de mi suerte de H√©ctor Lavoe.
H√©ctor Lavoe                    No quedan canciones en cola.
Let it Be                       No quedan canciones en cola.
a√±adir                          El artista no tiene canciones registradas.
Let it Be                       Terminando la sesi√≥n. ¬°Hasta pronto!
The Beatles
reproducir
The Beatles
reproducir
The Beatles
reproducir
H√©ctor Lavoe
reproducir
The Beatles
reproducir
The Beatles
reproducir
Shakira
detener
"""

### ESCRIBA SU C√ìDIGO A PARTIR DE AQU√ç ### (~ 24 l√≠neas de c√≥digo)
# Declarar diccionario de canciones (~ 1 l√≠nea)
canciones = dict()

# Inicio ciclo (~ 23 l√≠neas) 
while True:
    ## Entrada comando (~ 1 l√≠nea)
    comando = input()

    ## Comando 'a√±adir' (~ 6 l√≠neas)
    if comando == 'a√±adir':
        ### Entrada de datos (~ 2 l√≠neas)
        cancion = input()
        artista = input()
        ### Comprobar existencia artista (~ 2 l√≠neas)
        if artista not in canciones:
            canciones[artista] = list()
        canciones[artista].append(cancion)

    ## Comando 'reproducir' (~ 8 l√≠neas)
    elif comando == 'reproducir':
        ### Entrada de datos (~ 1 l√≠nea)
        artista = input()
        ### Comprobar existencia artista (~ 6 l√≠neas)
        if artista in canciones:
            #### comprobar estado de la lista (~ 5 l√≠neas)
            if len(canciones[artista]) > 0:
                cancion = canciones[artista].pop(0)
                print(f'Reproduciendo {cancion} de {artista}.')
            else:
                print(f'No quedan canciones en cola.')
        else:
            ### Artista no registrado (~ 2 l√≠neas)
            print(f'El artista no tiene canciones registradas.')

    ## Comando 'detener' (~ 3 l√≠neas)
    elif comando == 'detener':
        print('Terminando la sesi√≥n. ¬°Hasta pronto!')
        break
    ## Comando desconocido (~ 2 l√≠neas)
    else:
        print('Comando no reconocido. Intente de nuevo:')