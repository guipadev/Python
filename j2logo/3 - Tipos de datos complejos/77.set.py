Qu√© es el tipo set en Python
Al comienzo del tutorial adelantaba que el tipo set en Python es utilizado para trabajar con conjuntos de elementos. La principal caracter√≠stica de este tipo de datos es que es una colecci√≥n cuyos elementos no guardan ning√∫n orden y que adem√°s son √∫nicos.

Estas caracter√≠sticas hacen que los principales usos de esta clase sean conocer si un elemento pertenece o no a una colecci√≥n y eliminar duplicados de un tipo secuencial (list, tuple o str).

Adem√°s, esta clase tambi√©n implementa las t√≠picas operaciones matem√°ticas sobre conjuntos: uni√≥n, intersecci√≥n, diferencia, ‚Ä¶

Para crear un conjunto, basta con encerrar una serie de elementos entre llaves {}, o bien usar el constructor de la clase set() y pasarle como argumento un objeto iterable (como una lista, una tupla, una cadena ‚Ä¶).

# Crea un conjunto con una serie de elementos entre llaves
# Los elementos repetidos se eliminan
>>> c = {1, 3, 2, 9, 3, 1}
>>> c
{1, 2, 3, 9}
# Crea un conjunto a partir de un string
# Los caracteres repetidos se eliminan

>>> a = set('Hola Pythonista')
>>> a
{'a', 'H', 'h', 'y', 'n', 's', 'P', 't', ' ', 'i', 'l', 'o'}

# Crea un conjunto a partir de una lista
# Los elementos repetidos de la lista se eliminan

>>> unicos = set([3, 5, 6, 1, 5])
>>> unicos
{1, 3, 5, 6}
Para crear un conjunto vac√≠o, simplemente llama al constructor set() sin par√°metros.

‚ùóÔ∏è IMPORTANTE: {} NO crea un conjunto vac√≠o, sino un diccionario vac√≠o. Usa set() si quieres crear un conjunto sin elementos.

üéØ NOTA: Los elementos que se pueden a√±adir a un conjunto deben ser de tipo hashable. Un objeto es hashable si tiene un valor de hash que no cambia durante todo su ciclo de vida. En principio, los objetos que son instancias de clases definidas por el usuario son hashables. Tambi√©n lo son la mayor√≠a de tipos inmutables definidos por Python.
